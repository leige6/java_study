<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
		xmlns:p="http://www.springframework.org/schema/p"
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:mvc="http://www.springframework.org/schema/mvc"
		xmlns:util="http://www.springframework.org/schema/util"		
		xmlns:aop="http://www.springframework.org/schema/aop"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xmlns:cache="http://www.springframework.org/schema/cache"  
		xsi:schemaLocation="
  		http://www.springframework.org/schema/beans
  		http://www.springframework.org/schema/beans/spring-beans.xsd
  		http://www.springframework.org/schema/context
  		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop  
		http://www.springframework.org/schema/aop/spring-aop-3.0.xsd  
		http://www.springframework.org/schema/tx  
		http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.1.xsd"
	    default-autowire="byName">
	         
 
    <cache:annotation-driven cache-manager="cacheManager" proxy-target-class="true" />  
    
    <!-- 连接池配置 --> 
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <!-- 连接池中最大空闲的连接数 -->
        <property name="maxIdle" value="${redisMaxIdle}" />
       <!--  获取连接时的最大等待毫秒数(如果设置为阻塞时BlockWhenExhausted),如果超时就抛异常, 小于零:阻塞不确定的时间,  默认-1-->
        <property name="maxWaitMillis" value="${redisMaxWait}" />
        <!-- 在获取连接的时候检查有效性, 默认false-->
        <property name="testOnBorrow" value="${redisTestOnBorrow}" />
    </bean>
    
     <!-- Redis集群配置 start -->
    <!-- <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <constructor-arg name="clusterConfig" ref="redisClusterConfig" />
        <property name="timeout" value="${redis.timeout}" />
        <property name="poolConfig" ref="jedisPoolConfig" />
    </bean>
   
	<bean id="redisClusterConfig"
		class="org.springframework.data.redis.connection.RedisClusterConfiguration">
		<property name="maxRedirects" value="3"></property>
		<property name="clusterNodes">
			<set>
				<bean class="org.springframework.data.redis.connection.RedisNode">
					<constructor-arg name="host" value="192.168.70.128"></constructor-arg>
					<constructor-arg name="port" value="7000"></constructor-arg>
				</bean>

				<bean class="org.springframework.data.redis.connection.RedisNode">
					<constructor-arg name="host" value="192.168.70.128"></constructor-arg>
					<constructor-arg name="port" value="7001"></constructor-arg>
				</bean>
				
				<bean class="org.springframework.data.redis.connection.RedisNode">
					<constructor-arg name="host" value="192.168.70.128"></constructor-arg>
					<constructor-arg name="port" value="7002"></constructor-arg>
				</bean>
				
				<bean class="org.springframework.data.redis.connection.RedisNode">
					<constructor-arg name="host" value="192.168.70.128"></constructor-arg>
					<constructor-arg name="port" value="7003"></constructor-arg>
				</bean>
				
				<bean class="org.springframework.data.redis.connection.RedisNode">
					<constructor-arg name="host" value="192.168.70.128"></constructor-arg>
					<constructor-arg name="port" value="7004"></constructor-arg>
				</bean>
				
				<bean class="org.springframework.data.redis.connection.RedisNode">
					<constructor-arg name="host" value="192.168.70.128"></constructor-arg>
					<constructor-arg name="port" value="7005"></constructor-arg>
				</bean>
			</set>
		</property>
	</bean> -->
   <!-- Redis集群配置 end-->
    
    
    <!-- Redis单机配置 start -->
    <bean id="connectionFactory"
        class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="poolConfig" ref="poolConfig" />
        <property name="port" value="${redisPort}" />
        <property name="hostName" value="${redisHost}" />
        <!-- <property name="password" value="${redis.password}" /> -->
        <property name="timeout" value="${redisMaxWait}"></property>
    </bean>
    <!-- Redis单机配置 end-->
    
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="connectionFactory" />
        <property name="keySerializer">
           <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" /> 
            <!--  <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />  -->
        </property>
        <property name="valueSerializer">
            <bean
                class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
        </property>
    </bean>
    <!-- 配置缓存 -->
    <bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
        <constructor-arg ref="redisTemplate" />
    </bean>
    
    
</beans>
